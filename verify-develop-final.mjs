#!/usr/bin/env node

/**
 * VERIFICACI√ìN FINAL POST-MERGE A DEVELOP
 * Confirma que el sistema completo est√° funcional
 */

import fs from 'fs'
import path from 'path'

console.log('üéØ VERIFICACI√ìN FINAL POST-MERGE A DEVELOP')
console.log('='.repeat(60))

// Archivos cr√≠ticos del sistema de activaci√≥n
const CRITICAL_FILES = [
  { file: 'pages/landing.tsx', desc: 'Landing page renovada' },
  { file: 'pages/activar.tsx', desc: 'Formulario de activaci√≥n' },
  { file: 'pages/demo.tsx', desc: 'P√°gina de demo' },
  { file: 'pages/gracias.tsx', desc: 'P√°gina de confirmaci√≥n' },
  { file: 'pages/api/activar.ts', desc: 'API backend' },
  { file: 'supabase/migrations/20250208000000_create_activaciones_table.sql', desc: 'Migraci√≥n DB' },
  { file: 'middleware.ts', desc: 'Configuraci√≥n de rutas p√∫blicas' },
  { file: 'test-activar-curl.sh', desc: 'Script de pruebas cURL' },
  { file: 'MERGE_TO_DEVELOP_SUMMARY.md', desc: 'Documentaci√≥n del merge' }
]

console.log('\nüìã VERIFICANDO ARCHIVOS CR√çTICOS:')
let allFilesPresent = true

for (const item of CRITICAL_FILES) {
  if (fs.existsSync(item.file)) {
    const stats = fs.statSync(item.file)
    const size = (stats.size / 1024).toFixed(1)
    console.log(`‚úÖ ${item.file.padEnd(60)} (${size} KB) - ${item.desc}`)
  } else {
    console.log(`‚ùå ${item.file.padEnd(60)} - FALTANTE: ${item.desc}`)
    allFilesPresent = false
  }
}

// Verificar configuraci√≥n del middleware
console.log('\nüîí VERIFICANDO MIDDLEWARE:')
if (fs.existsSync('middleware.ts')) {
  const middlewareContent = fs.readFileSync('middleware.ts', 'utf8')
  const publicRoutes = ['/activar', '/demo', '/gracias', '/api/activar']
  
  for (const route of publicRoutes) {
    if (middlewareContent.includes(route)) {
      console.log(`‚úÖ Ruta p√∫blica configurada: ${route}`)
    } else {
      console.log(`‚ùå Ruta p√∫blica faltante: ${route}`)
      allFilesPresent = false
    }
  }
  
  // Verificar que no hay secretos hardcodeados
  const hasHardcodedSecrets = middlewareContent.match(/['"](sk-|supabase_[a-zA-Z0-9]{40,}|[A-Za-z0-9+/]{64,}={0,2})['"]/g)
  if (hasHardcodedSecrets) {
    console.log(`‚ùå SECRETOS HARDCODEADOS DETECTADOS: ${hasHardcodedSecrets.join(', ')}`)
    allFilesPresent = false
  } else {
    console.log(`‚úÖ Sin secretos hardcodeados (usa process.env correctamente)`)
  }
}

// Verificar estructura de Supabase
console.log('\nüóÑÔ∏è VERIFICANDO MIGRACI√ìN DE SUPABASE:')
const migrationFile = 'supabase/migrations/20250208000000_create_activaciones_table.sql'
if (fs.existsSync(migrationFile)) {
  const migrationContent = fs.readFileSync(migrationFile, 'utf8')
  const requiredElements = [
    'CREATE TABLE IF NOT EXISTS activaciones',
    'contacto_nombre TEXT NOT NULL',
    'contacto_whatsapp TEXT NOT NULL', 
    'contacto_email TEXT NOT NULL',
    'ENABLE ROW LEVEL SECURITY',
    'Anyone can create activation request'
  ]
  
  for (const element of requiredElements) {
    if (migrationContent.includes(element)) {
      console.log(`‚úÖ ${element}`)
    } else {
      console.log(`‚ùå Faltante: ${element}`)
      allFilesPresent = false
    }
  }
}

// Verificar que los scripts de prueba existen
console.log('\nüß™ VERIFICANDO SCRIPTS DE PRUEBA:')
const testScripts = [
  'test-activar-curl.sh',
  'verify-complete-system.mjs',
  'verify-landing-routes.mjs'
]

for (const script of testScripts) {
  if (fs.existsSync(script)) {
    console.log(`‚úÖ ${script}`)
  } else {
    console.log(`‚ùå ${script} - Script de prueba faltante`)
  }
}

// Resumen final
console.log('\n' + '='.repeat(60))
if (allFilesPresent) {
  console.log('üéâ DEVELOP EST√Å COMPLETAMENTE ACTUALIZADO')
  console.log('')
  console.log('‚úÖ Todos los archivos cr√≠ticos presentes')
  console.log('‚úÖ Configuraci√≥n de seguridad correcta') 
  console.log('‚úÖ Migraci√≥n de base de datos lista')
  console.log('‚úÖ Scripts de verificaci√≥n incluidos')
  console.log('')
  console.log('üöÄ SISTEMA LISTO PARA:')
  console.log('   ‚Ä¢ Deployment a producci√≥n')
  console.log('   ‚Ä¢ Captura de leads B2B')
  console.log('   ‚Ä¢ Procesamiento de formularios de activaci√≥n')
  console.log('   ‚Ä¢ Integraci√≥n completa con Supabase')
  console.log('')
  console.log('üì° PR√ìXIMO PASO: git push origin develop')
} else {
  console.log('‚ö†Ô∏è HAY ARCHIVOS FALTANTES O PROBLEMAS DE CONFIGURACI√ìN')
  console.log('üí° Revisar errores arriba antes de hacer push')
}
console.log('='.repeat(60))
