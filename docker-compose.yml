services:
  postgres:
    image: postgres:17
    container_name: saas-proyecto-postgres-1
    user: postgres
    environment:
      POSTGRES_DB: saas_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: secret  # Establecemos una contraseña fija para desarrollo
      # POSTGRES_PASSWORD_FILE: /run/secrets/db_password  # Para producción usar secrets
    # secrets:
    #   - db_password
    ports:
      - "127.0.0.1:5433:5432"
    volumes:
      - ./postgres-init:/docker-entrypoint-initdb.d:ro
      - postgres-data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d saas_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000
  
  redis:
    image: redis:7-alpine
    container_name: saas-proyecto-redis-1
    command: ["redis-server", 
              "--requirepass", "${REDIS_PASSWORD:-redis_secret}", 
              "--appendonly", "yes",
              "--maxmemory", "256mb",
              "--maxmemory-policy", "allkeys-lru",
              "--save", "900", "1",
              "--save", "300", "10",
              "--save", "60", "10000"]
    user: redis
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_secret}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  bases_de_datos:
    build: ./bases_de_datos
    container_name: saas-proyecto-bases_de_datos-1
    user: node
    ports:
      - "3000:3000"
    environment:
      # Configuración explícita de la base de datos
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: admin
      DB_PASSWORD: secret  # Misma contraseña que POSTGRES_PASSWORD
      DB_NAME: saas_db
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secret}
      # Node environment
      NODE_ENV: ${NODE_ENV:-development}
    volumes:
      - ./logs:/app/logs
      - ~/.aws:/home/node/.aws:ro
    env_file:
      - ./bases_de_datos/.env
    networks:
      - backend
      - frontend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  asistencia:
    build: ./asistencia
    container_name: saas-proyecto-asistencia-1
    user: node
    ports:
      - "127.0.0.1:3003:3003"
    environment:
      # URL del servicio bases_de_datos
      API_BASE_URL: http://bases_de_datos:3000
      NODE_ENV: ${NODE_ENV:-development}
      REDIS_HOST: redis
      REDIS_PORT: "6379"
    env_file:
      - ./asistencia/.env
    networks:
      - frontend
      - backend
    depends_on:
      bases_de_datos:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  nomina:
    build: ./nomina
    container_name: saas-proyecto-nomina-1
    user: node
    ports:
      - "127.0.0.1:3002:3002"
    environment:
      # URL del servicio bases_de_datos
      API_BASE_URL: http://bases_de_datos:3000
      NODE_ENV: ${NODE_ENV:-development}
    env_file:
      - ./nomina/.env
    networks:
      - frontend
      - backend
    depends_on:
      bases_de_datos:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    # Removí 'internal: true' para permitir que bases_de_datos acceda a internet si es necesario

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local

# Si decides usar secrets, descomenta esta sección
# secrets:
#   db_password:
#     file: ./secrets/db_password.txt