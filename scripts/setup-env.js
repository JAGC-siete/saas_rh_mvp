#!/usr/bin/env node

/**
 * üîß SCRIPT DE CONFIGURACI√ìN DE VARIABLES DE ENTORNO
 * Crea autom√°ticamente el archivo .env.local con las variables correctas
 * 
 * Uso: node scripts/setup-env.js
 */

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

// Colores para output
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function generateRandomSecret(length = 64) {
  return crypto.randomBytes(length).toString('hex');
}

function createEnvFile() {
  log('üîß CONFIGURANDO VARIABLES DE ENTORNO', 'bold');
  log('=' .repeat(50), 'blue');
  
  const envPath = '.env.local';
  
  // Verificar si ya existe el archivo
  if (fs.existsSync(envPath)) {
    log('‚ö†Ô∏è  El archivo .env.local ya existe', 'yellow');
    log('¬øDeseas sobrescribirlo? (y/N)', 'yellow');
    
    // En un script autom√°tico, asumimos que s√≠
    log('Sobrescribiendo archivo existente...', 'blue');
  }
  
  // Generar secretos √∫nicos
  const jwtSecret = generateRandomSecret(64);
  const sessionSecret = generateRandomSecret(64);
  
  const envContent = `# üîß VARIABLES DE ENTORNO - SISTEMA HR SAAS
# Archivo: .env.local
# Generado autom√°ticamente el: ${new Date().toISOString()}
# √öltima actualizaci√≥n: 2025-01-27

# =============================================================================
# üîê SUPABASE CONFIGURATION
# =============================================================================

# URL de Supabase (p√∫blica - accesible desde el frontend)
NEXT_PUBLIC_SUPABASE_URL=https://YOUR-PROJECT.supabase.co

# Clave an√≥nima de Supabase (p√∫blica - accesible desde el frontend)
NEXT_PUBLIC_SUPABASE_ANON_KEY=

# Clave de servicio de Supabase (privada - solo backend)
SUPABASE_SERVICE_ROLE_KEY=

# =============================================================================
# üîë JWT CONFIGURATION
# =============================================================================

# Clave secreta para JWT (generada autom√°ticamente)
JWT_SECRET=${jwtSecret}

# =============================================================================
# üåê SITE CONFIGURATION
# =============================================================================

# URL del sitio (para CORS y redirecciones)
NEXT_PUBLIC_SITE_URL=

# =============================================================================
# üóÑÔ∏è DATABASE CONFIGURATION
# =============================================================================

# URL de conexi√≥n a la base de datos (para microservicios)
DATABASE_URL=

# =============================================================================
# üîÑ REDIS CONFIGURATION (para sesiones y cache)
# =============================================================================

# URL de Redis (opcional - para sesiones)
REDIS_URL=redis://localhost:6379

# Configuraci√≥n de Redis (opcional)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=

# =============================================================================
# üîí SESSION CONFIGURATION
# =============================================================================

# Clave secreta para sesiones (generada autom√°ticamente)
SESSION_SECRET=${sessionSecret}

# =============================================================================
# üöÄ DEPLOYMENT CONFIGURATION
# =============================================================================

# Entorno de ejecuci√≥n
NODE_ENV=development

# Puerto del servidor (Next.js)
PORT=3000

# =============================================================================
# üìß EMAIL CONFIGURATION (opcional - para notificaciones)
# =============================================================================

# Configuraci√≥n de email (opcional)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password

# =============================================================================
# üîç DEBUG CONFIGURATION
# =============================================================================

# Habilitar logs de debug
DEBUG=false

# =============================================================================
# üìä ANALYTICS CONFIGURATION (opcional)
# =============================================================================

# Google Analytics (opcional)
NEXT_PUBLIC_GA_ID=

# =============================================================================
# üõ°Ô∏è SECURITY CONFIGURATION
# =============================================================================

# Rate limiting (opcional)
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# =============================================================================
# üìù NOTAS IMPORTANTES
# =============================================================================

# ‚ö†Ô∏è  IMPORTANTE:
# 1. Este archivo NO debe subirse a Git (.env.local est√° en .gitignore)
# 2. Las claves NEXT_PUBLIC_* son accesibles desde el frontend
# 3. Las claves sin NEXT_PUBLIC_ son solo para el backend
# 4. JWT_SECRET y SESSION_SECRET fueron generados autom√°ticamente
# 5. En producci√≥n, usa variables de entorno del servidor, no este archivo

# üîÑ  PARA PRODUCCI√ìN:
# - Usa Railway, Vercel, o similar para configurar variables de entorno
# - NO uses este archivo en producci√≥n
# - Las claves deben ser diferentes en cada entorno

# üß™  PARA DESARROLLO:
# - Este archivo ya est√° configurado para desarrollo local
# - Nunca subas este archivo a Git
# - Los secretos son √∫nicos para este entorno
`;
  
  try {
    fs.writeFileSync(envPath, envContent, 'utf8');
    log(`‚úÖ Archivo .env.local creado exitosamente`, 'green');
    log(`üìÅ Ubicaci√≥n: ${path.resolve(envPath)}`, 'blue');
    
    // Mostrar resumen de configuraci√≥n
    log('\nüìä RESUMEN DE CONFIGURACI√ìN:', 'bold');
    log('=' .repeat(40), 'blue');
    log(`‚úÖ Supabase URL: Configurada`, 'green');
    log(`‚úÖ Supabase Anon Key: Configurada`, 'green');
    log(`‚úÖ Supabase Service Key: Configurada`, 'green');
    log(`‚úÖ JWT Secret: Generado autom√°ticamente`, 'green');
    log(`‚úÖ Session Secret: Generado autom√°ticamente`, 'green');
    log(`‚úÖ Site URL: Configurada`, 'green');
    log(`‚úÖ Database URL: Configurada`, 'green');
    log(`‚úÖ Node Environment: development`, 'green');
    
    log('\nüîê SECRETOS GENERADOS:', 'bold');
    log(`JWT_SECRET: ${jwtSecret.substring(0, 20)}...`, 'yellow');
    log(`SESSION_SECRET: ${sessionSecret.substring(0, 20)}...`, 'yellow');
    
    log('\nüìù PR√ìXIMOS PASOS:', 'bold');
    log('1. Verificar que el archivo .env.local se cre√≥ correctamente', 'blue');
    log('2. Ejecutar: npm run dev', 'blue');
    log('3. Probar las funcionalidades cr√≠ticas', 'blue');
    log('4. Verificar que no hay errores de variables de entorno', 'blue');
    
    return true;
  } catch (error) {
    log(`‚ùå Error creando archivo .env.local: ${error.message}`, 'red');
    return false;
  }
}

function verifyEnvFile() {
  log('\nüîç VERIFICANDO CONFIGURACI√ìN DE VARIABLES DE ENTORNO', 'bold');
  
  const envPath = '.env.local';
  
  if (!fs.existsSync(envPath)) {
    log('‚ùå Archivo .env.local no encontrado', 'red');
    return false;
  }
  
  const content = fs.readFileSync(envPath, 'utf8');
  
  // Verificar variables cr√≠ticas
  const requiredVars = [
    'NEXT_PUBLIC_SUPABASE_URL',
    'NEXT_PUBLIC_SUPABASE_ANON_KEY',
    'SUPABASE_SERVICE_ROLE_KEY',
    'JWT_SECRET',
    'SESSION_SECRET',
    'NEXT_PUBLIC_SITE_URL',
    'DATABASE_URL'
  ];
  
  let allPresent = true;
  
  for (const varName of requiredVars) {
    if (content.includes(varName)) {
      log(`‚úÖ ${varName}: Presente`, 'green');
    } else {
      log(`‚ùå ${varName}: Faltante`, 'red');
      allPresent = false;
    }
  }
  
  // Verificar que los secretos no sean los valores por defecto
  if (content.includes('your-secret-key-here') || content.includes('super-secret')) {
    log('‚ö†Ô∏è  Los secretos parecen ser valores por defecto', 'yellow');
    log('Recomendaci√≥n: Regenerar secretos √∫nicos', 'yellow');
  }
  
  return allPresent;
}

function showEnvInstructions() {
  log('\nüìñ INSTRUCCIONES MANUALES:', 'bold');
  log('=' .repeat(50), 'blue');
  
  log('\nüîß Si el script autom√°tico no funciona, crea manualmente .env.local:', 'yellow');
  log('', 'reset');
  log('1. Crear archivo .env.local en la ra√≠z del proyecto', 'blue');
  log('2. Copiar y pegar el siguiente contenido:', 'blue');
  log('', 'reset');
  
  const manualContent = `# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL=https://YOUR-PROJECT.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=
SUPABASE_SERVICE_ROLE_KEY=

# JWT Configuration
JWT_SECRET=tu_jwt_secret_unico_y_seguro_aqui

# Site Configuration
NEXT_PUBLIC_SITE_URL=

# Database Configuration
DATABASE_URL=

# Session Configuration
SESSION_SECRET=tu_session_secret_unico_y_seguro_aqui

# Environment
NODE_ENV=development
PORT=3000`;
  
  log(manualContent, 'reset');
  log('', 'reset');
  log('3. Reemplazar los valores de JWT_SECRET y SESSION_SECRET con secretos √∫nicos', 'blue');
  log('4. Guardar el archivo', 'blue');
  log('5. Ejecutar: npm run dev', 'blue');
}

// FUNCI√ìN PRINCIPAL
async function main() {
  log('üöÄ CONFIGURADOR DE VARIABLES DE ENTORNO', 'bold');
  log('=' .repeat(60), 'blue');
  
  try {
    // Crear archivo .env.local
    const created = createEnvFile();
    
    if (created) {
      // Verificar configuraci√≥n
      const verified = verifyEnvFile();
      
      if (verified) {
        log('\nüéâ CONFIGURACI√ìN COMPLETADA EXITOSAMENTE', 'bold');
        log('‚úÖ Todas las variables de entorno est√°n configuradas', 'green');
        log('‚úÖ Los secretos fueron generados autom√°ticamente', 'green');
        log('‚úÖ El archivo .env.local est√° listo para usar', 'green');
        
        log('\nüìù PR√ìXIMOS PASOS:', 'bold');
        log('1. Ejecutar: npm run dev', 'blue');
        log('2. Probar: http://localhost:3000', 'blue');
        log('3. Verificar que no hay errores en la consola', 'blue');
        log('4. Probar funcionalidades cr√≠ticas (login, asistencia, n√≥mina)', 'blue');
      } else {
        log('\n‚ö†Ô∏è  CONFIGURACI√ìN PARCIAL', 'yellow');
        log('‚ùå Algunas variables pueden estar faltando', 'red');
        showEnvInstructions();
      }
    } else {
      log('\n‚ùå ERROR EN LA CONFIGURACI√ìN', 'red');
      showEnvInstructions();
    }
    
  } catch (error) {
    log(`\nüí• ERROR FATAL: ${error.message}`, 'red');
    showEnvInstructions();
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  main().catch(error => {
    log(`\nüí• ERROR FATAL: ${error.message}`, 'red');
    process.exit(1);
  });
}

module.exports = {
  createEnvFile,
  verifyEnvFile,
  generateRandomSecret
}; 